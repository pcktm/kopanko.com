---
import type { GetStaticPaths } from "astro";
import { getAllNotes, getNoteBySlug } from "@lib/cms/notes";
import Layout from "@layouts/Layout.astro";
import RichTextRenderer from "@components/RichTextRenderer";
import Comments from "@components/Comments";

export const getStaticPaths = (async () => {
  const allNotes = await getAllNotes();
  return allNotes.map((note) => ({
    params: {
      slug: note.slug,
    },
  }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;
const note = await getNoteBySlug(slug);
---

<Layout
  title={note.title}
  keywords={note.tags?.join(", ")}
  description={note.excerpt}
  ogImageUrl={note.coverImage.url}
  breadcrumb={"notes.sh " + note.id.slice(-4)}
>
  <div class="terminal-post sm:border sm:border-stone-300 sm:bg-stone-50 p-0 sm:p-8 sm:dark:border-stone-700 sm:dark:bg-stone-900/40">

    <div class="mb-6 border-b border-stone-200 pb-6 dark:border-stone-700">
      <div class="font-mono text-xs text-stone-500 dark:text-stone-400 mb-2">
        <span class="text-yellow-600 dark:text-yellow-400">#</span> metadata
      </div>
      <div class="font-redaction20 text-balance">
        <h1 class="text-4xl font-bold">{note.title}</h1>
      </div>
      <div class="text-md mt-3 font-mono text-balance text-stone-600 dark:text-stone-300">
        <p>{note.excerpt}</p>
      </div>
      <div class="mt-3 flex flex-col gap-1 text-sm font-mono sm:flex-row sm:justify-between">
        <div class="flex flex-wrap gap-2">
          {note.tags?.map((tag) => (
            <span class="bg-stone-200 px-2 py-0.5 text-xs dark:bg-stone-800">#{tag}</span>
          ))}
        </div>
        <div class="text-stone-500 dark:text-stone-400">
          {
            new Date(note.date).toLocaleDateString("en-US", {
              year: "numeric",
              month: "short",
              day: "numeric",
            })
          }
        </div>
      </div>
    </div>

    <div class="mb-8">
      <div class="font-mono text-xs text-stone-500 dark:text-stone-400 mb-2">
        <span class="text-blue-600 dark:text-blue-400">></span> cover_image.jpg
      </div>
      <div class="overflow-hidden">
        <img
          src={note.coverImage.url}
          class="w-full"
          height={note.coverImage.height || 400}
          width={note.coverImage.width || 800}
          style={note.coverImage.placeholder?.css}
        />
      </div>
    </div>

    <div class="mb-6 font-mono text-xs text-stone-500 dark:text-stone-400">
      <span class="text-cyan-600 dark:text-cyan-400">//</span> content
    </div>

    <article
      class="prose prose-stone dark:prose-invert prose-img:rounded-md mb-8 font-sans md:mb-10 max-w-none"
      id="content"
    >
      <RichTextRenderer
        richContent={note.richContent.json}
        references={note.richContent.references}
      />
    </article>

    <div class="border-t border-stone-200 pt-6 dark:border-stone-700">
      {note.links && note.links.length > 0 && (
        <div class="mb-6 border-b border-stone-200 pb-6 dark:border-stone-700">
          <div class="font-mono text-xs text-stone-500 dark:text-stone-400 mb-3">
            <span class="text-purple-600 dark:text-purple-400">@</span> references
          </div>
          <div class="flex flex-col gap-2">
            {note.links.map((link, index) => {
              const isArray = Array.isArray(link);
              const url = isArray ? link[0] : link;
              const title = isArray ? link[1] : null;
              const displayUrl = new URL(url).hostname;
              
              return (
                <div class="flex items-center gap-3 font-mono text-sm">
                  <span class="text-stone-400 dark:text-stone-500 text-xs">
                    [{String(index + 1).padStart(2, '0')}]
                  </span>
                  <a 
                    href={url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200"
                  >
                    <span class="text-green-600 dark:text-green-400">â†’</span> 
                    {title ? (
                      <span class="text-stone-500 dark:text-stone-400">{title}: </span><span>{displayUrl}</span>
                    ) : (
                      <span>{displayUrl}</span>
                    )}
                  </a>
                </div>
              );
            })}
          </div>
        </div>
      )}

      <div class="font-mono text-xs text-stone-500 dark:text-stone-400">
        <span class="text-green-600 dark:text-green-400">$</span> EOF
      </div>
    </div>
  </div>

  <div class="mt-8">
    <div class="mb-4 font-mono text-xs text-stone-500 dark:text-stone-400">
      <div class="flex items-center gap-2">
        <span class="text-purple-600 dark:text-purple-400">&</span>
        <span>comments --interactive</span>
      </div>
    </div>
    <div class="mx-auto mt-2">
      <Comments term={note.title} client:only />
    </div>
  </div>
</Layout>


<script>
  const images = document.querySelectorAll(
    "#content img",
  ) as NodeListOf<HTMLImageElement>;
  images.forEach((image) => {
    image.addEventListener("load", () => {
      image.style.background = "none";
    });
  });
</script>
